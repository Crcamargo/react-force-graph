import React from 'react';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

function index (kapsuleComponent) {
  var wrapperElType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
  var bindMethodNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var FromKapsuleComp = function (_React$PureComponent) {
    inherits(FromKapsuleComp, _React$PureComponent);

    function FromKapsuleComp() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, FromKapsuleComp);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FromKapsuleComp.__proto__ || Object.getPrototypeOf(FromKapsuleComp)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), possibleConstructorReturn(_this, _ret);
    }

    // Call a component method


    createClass(FromKapsuleComp, [{
      key: 'componentDidMount',
      // method not found

      value: function componentDidMount() {
        var _this2 = this;

        Object.keys(this.props).forEach(function (p) {
          _this2._call(p, _this2.props[p]);
        });
        this.state.comp(this.rootElem);
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        var _this3 = this;

        Object.keys(this.props).forEach(function (p) {
          if (prevProps[p] !== _this3.props[p]) {
            _this3._call(p, _this3.props[p]);
          }
        });
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        // Invoke _destructor, if it exists
        if (this.state.comp._destructor instanceof Function) {
          this.state.comp._destructor();
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _this4 = this;

        return React.createElement(wrapperElType, { ref: function ref(elem) {
            _this4.rootElem = elem;
          } });
      }
    }]);
    return FromKapsuleComp;
  }(React.PureComponent);

  var _initialiseProps = function _initialiseProps() {
    var _this5 = this;

    this.state = {
      comp: kapsuleComponent()
    };

    this._call = function (method) {
      var _state$comp;

      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      return _this5.state.comp[method] instanceof Function ? (_state$comp = _this5.state.comp)[method].apply(_state$comp, args) : undefined;
    };
  };

  bindMethodNames.forEach(function (method) {
    FromKapsuleComp.prototype[method] = function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return this._call.apply(this, [method].concat(args));
    };
  });

  return FromKapsuleComp;
}

export default index;
